---
interface Props {
  date: string;
}

const { date } = Astro.props;
---

<!-- Countdown Start -->
<div class="exvent-countdown countdown" data-countdown={date}>
  <div class="single-countdown">
    <span class="count countdown__time daysLeft"></span>
    <span class="value countdown__time daysText"></span>
  </div>
  <div class="single-countdown countdown-2">
    <span class="count countdown__time hoursLeft"></span>
    <span class="value countdown__time hoursText"></span>
  </div>
  <div class="single-countdown countdown-3">
    <span class="count countdown__time minsLeft"></span>
    <span class="value countdown__time minsText"></span>
  </div>
  <div class="single-countdown countdown-4">
    <span class="count countdown__time secsLeft"></span>
    <span class="value countdown__time secsText"></span>
  </div>
</div>
<!-- Countdown End -->

<script>
  function calculateTimeRemaining(endDate: string): { [key: string]: number } {
    const today = new Date();
    const bigDay = new Date(endDate);
    const msPerDay = 24 * 60 * 60 * 1000;
    const timeLeft = bigDay.getTime() - today.getTime();

    const daysLeft = Math.floor(timeLeft / msPerDay);
    const hoursLeft = Math.floor((timeLeft % msPerDay) / (1000 * 60 * 60));
    const minsLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const secsLeft = Math.floor((timeLeft % (1000 * 60)) / 1000);

    return {
      daysLeft,
      hoursLeft,
      minsLeft,
      secsLeft
    };
  }

  function updateCountdownMarkup(
    element: HTMLElement,
    timeRemaining: { [key: string]: number }
  ): void {
    const units = ['days', 'hours', 'mins', 'secs'];
    const texts = ['DÃ­a', 'Hora', 'Minuto', 'Segundo'];

    units.forEach((unit, index) => {
      const value = timeRemaining[unit + 'Left'];
      const text = value !== 1 ? texts[index] + 's' : texts[index];

      const unitLeftElement = element.querySelector(`.${unit}Left`);
      const unitTextElement = element.querySelector(`.${unit}Text`);

      if (unitLeftElement && unitTextElement) {
        unitLeftElement.innerHTML = value.toString().padStart(2, '0');
        unitTextElement.innerHTML = text;
      }
    });
  }

  function makeTimer(endDate: string, element: HTMLElement): void {
    const timeRemaining = calculateTimeRemaining(endDate);
    updateCountdownMarkup(element, timeRemaining);

    // Check if countdown has ended
    if (
      timeRemaining.daysLeft <= 0 &&
      timeRemaining.hoursLeft <= 0 &&
      timeRemaining.minsLeft <= 0 &&
      timeRemaining.secsLeft <= 0
    ) {
      element.setAttribute('style', 'display: none;');
    }
  }

  document.querySelectorAll('.countdown').forEach((element: HTMLElement) => {
    const endDate = element.getAttribute('data-countdown');
    setInterval(() => {
      makeTimer(endDate, element);
    }, 1000);
  });
</script>
